import React, { useState, useEffect } from 'react';
import './TrainingPage.css';

function TrainingPage() {
  const [activeTab, setActiveTab] = useState('courses');
  const [courses, setCourses] = useState([]);
  const [trainings, setTrainings] = useState([]);
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Modal
  const [showCourseModal, setShowCourseModal] = useState(false);
  const [showTrainingModal, setShowTrainingModal] = useState(false);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [selectedTraining, setSelectedTraining] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError('');
      try {
        const token = localStorage.getItem('accessToken');
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const usersResponse = await fetch('http://localhost:8000/api/users/', {
          headers: {
            'Authorization': token ? `Bearer ${token}` : undefined,
            'Content-Type': 'application/json',
          },
        });
        
        if (usersResponse.ok) {
          const usersData = await usersResponse.json();
          setUsers(usersData);
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
        const mockCourses = generateMockCourses();
        const mockTrainings = generateMockTrainings();
        
        setCourses(mockCourses);
        setTrainings(mockTrainings);
        
      } catch (err) {
        setError(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á
  const generateMockCourses = () => {
    return [
      {
        id: 1,
        name: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
        description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
        category: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
        duration: '16 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
        level: '‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
        instructor: '‡∏î‡∏£. ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
        is_active: true,
        created_at: '2024-01-15T10:00:00Z'
      },
      {
        id: 2,
        name: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î Python',
        description: '‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢ Python',
        category: '‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤',
        duration: '24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
        level: '‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
        instructor: '‡∏≠. ‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏î‡∏µ',
        is_active: true,
        created_at: '2024-01-10T14:30:00Z'
      },
      {
        id: 3,
        name: '‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•',
        description: '‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏¢‡∏∏‡∏Ñ‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•',
        category: '‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î',
        duration: '12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
        level: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        instructor: '‡∏≠. ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô',
        is_active: false,
        created_at: '2024-01-05T09:15:00Z'
      }
    ];
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á
  const generateMockTrainings = () => {
    return [
      {
        id: 1,
        course_id: 1,
        course_name: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
        user_id: 1,
        user_name: 'admin User',
        start_date: '2024-01-20',
        end_date: '2024-01-22',
        status: 'completed',
        result: '‡∏ú‡πà‡∏≤‡∏ô',
        score: 85,
        certificate: 'CERT-001',
        notes: '‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤'
      },
      {
        id: 2,
        course_id: 2,
        course_name: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î Python',
        user_id: 2,
        user_name: 'manager User',
        start_date: '2024-01-25',
        end_date: '2024-01-28',
        status: 'in_progress',
        result: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
        score: null,
        certificate: null,
        notes: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡∏π‡πà'
      },
      {
        id: 3,
        course_id: 1,
        course_name: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
        user_id: 3,
        user_name: 'user1 User',
        start_date: '2024-02-01',
        end_date: '2024-02-03',
        status: 'scheduled',
        result: '‡∏£‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
        score: null,
        certificate: null,
        notes: '‡∏£‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
      }
    ];
  };

  const getStatusBadge = (status) => {
    const statusConfig = {
      'active': { text: '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', color: '#28a745', icon: '‚úÖ' },
      'inactive': { text: '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', color: '#dc3545', icon: '‚ùå' },
      'completed': { text: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', color: '#28a745', icon: '‚úÖ' },
      'in_progress': { text: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', color: '#ffc107', icon: '‚è≥' },
      'scheduled': { text: '‡∏£‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', color: '#17a2b8', icon: 'üìÖ' },
      'failed': { text: '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô', color: '#dc3545', icon: '‚ùå' }
    };
    
    const config = statusConfig[status] || statusConfig['active'];
    return (
      <span style={{ 
        backgroundColor: config.color, 
        color: 'white', 
        padding: '4px 8px', 
        borderRadius: '12px', 
        fontSize: '12px',
        fontWeight: '500'
      }}>
        {config.icon} {config.text}
      </span>
    );
  };

  const getLevelColor = (level) => {
    switch (level) {
      case '‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô': return '#28a745';
      case '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á': return '#ffc107';
      case '‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á': return '#dc3545';
      default: return '#6c757d';
    }
  };

  const handleAddCourse = () => {
    setSelectedCourse(null);
    setShowCourseModal(true);
  };

  const handleEditCourse = (course) => {
    setSelectedCourse(course);
    setShowCourseModal(true);
  };

  const handleDeleteCourse = (course) => {
    if (window.confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ "${course.name}" ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
      setCourses(courses.filter(c => c.id !== course.id));
    }
  };

  const handleAddTraining = () => {
    setSelectedTraining(null);
    setShowTrainingModal(true);
  };

  const handleEditTraining = (training) => {
    setSelectedTraining(training);
    setShowTrainingModal(true);
  };

  const handleDeleteTraining = (training) => {
    if (window.confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏ô‡∏µ‡πâ ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
      setTrainings(trainings.filter(t => t.id !== training.id));
    }
  };

  return (
    <div className="training-page-container">
      <div className="training-header">
        <h2>üéì ‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°</h2>
        <p>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</p>
      </div>

      {/* Tab Navigation */}
      <div className="training-tabs">
        <button 
          className={`tab-button ${activeTab === 'courses' ? 'active' : ''}`}
          onClick={() => setActiveTab('courses')}
        >
          üìö ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£
        </button>
        <button 
          className={`tab-button ${activeTab === 'trainings' ? 'active' : ''}`}
          onClick={() => setActiveTab('trainings')}
        >
          üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°
        </button>
      </div>

      {loading ? (
        <div className="loading-container">
          <div>‚è≥</div>
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
        </div>
      ) : error ? (
        <div className="error-container">
          {error}
        </div>
      ) : (
        <div className="training-content">
          {/* ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ */}
          {activeTab === 'courses' && (
            <div className="courses-section">
              <div className="section-header">
                <h3>üìö ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£</h3>
                <button onClick={handleAddCourse} className="btn-add">
                  ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà
                </button>
              </div>

              <div className="courses-grid">
                {courses.length === 0 ? (
                  <div className="empty-state">
                    <div>üìö</div>
                    <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£</p>
                  </div>
                ) : (
                  courses.map(course => (
                    <div key={course.id} className="course-card">
                      <div className="course-header">
                        <div className="course-icon">
                          {course.category === '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£' ? 'üìä' :
                           course.category === '‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤' ? 'üíª' :
                           course.category === '‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î' ? 'üìà' : 'üìö'}
                        </div>
                        <div className="course-info">
                          <h4>{course.name}</h4>
                          <p>{course.description}</p>
                        </div>
                        <div className="course-status">
                          {getStatusBadge(course.is_active ? 'active' : 'inactive')}
                        </div>
                      </div>

                      <div className="course-details">
                        <div className="detail-item">
                          <span className="label">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</span>
                          <span className="value">{course.category}</span>
                        </div>
                        <div className="detail-item">
                          <span className="label">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:</span>
                          <span className="value">{course.duration}</span>
                        </div>
                        <div className="detail-item">
                          <span className="label">‡∏£‡∏∞‡∏î‡∏±‡∏ö:</span>
                          <span className="value" style={{ color: getLevelColor(course.level) }}>
                            {course.level}
                          </span>
                        </div>
                        <div className="detail-item">
                          <span className="label">‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô:</span>
                          <span className="value">{course.instructor}</span>
                        </div>
                      </div>

                      <div className="course-footer">
                        <div className="course-meta">
                          ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {new Date(course.created_at).toLocaleDateString('th-TH')}
                        </div>
                        
                        <div className="course-actions">
                          <button 
                            onClick={() => handleEditCourse(course)}
                            className="btn-edit"
                          >
                            ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                          </button>
                          <button 
                            onClick={() => handleDeleteCourse(course)}
                            className="btn-delete"
                          >
                            üóëÔ∏è ‡∏•‡∏ö
                          </button>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          )}

          {/* ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° */}
          {activeTab === 'trainings' && (
            <div className="trainings-section">
              <div className="section-header">
                <h3>üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°</h3>
                <button onClick={handleAddTraining} className="btn-add">
                  ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°
                </button>
              </div>

              <div className="trainings-grid">
                {trainings.length === 0 ? (
                  <div className="empty-state">
                    <div>üìã</div>
                    <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°</p>
                  </div>
                ) : (
                  trainings.map(training => (
                    <div key={training.id} className="training-card">
                      <div className="training-header">
                        <div className="training-user">
                          <div className="user-avatar">
                            {training.user_name.charAt(0).toUpperCase()}
                          </div>
                          <div>
                            <h4>{training.user_name}</h4>
                            <p>{training.course_name}</p>
                          </div>
                        </div>
                        <div className="training-status">
                          {getStatusBadge(training.status)}
                        </div>
                      </div>

                      <div className="training-details">
                        <div className="detail-row">
                          <div className="detail-item">
                            <span className="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°:</span>
                            <span className="value">{training.start_date}</span>
                          </div>
                          <div className="detail-item">
                            <span className="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</span>
                            <span className="value">{training.end_date}</span>
                          </div>
                        </div>
                        
                        <div className="detail-row">
                          <div className="detail-item">
                            <span className="label">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°:</span>
                            <span className="value">{training.result}</span>
                          </div>
                          {training.score && (
                            <div className="detail-item">
                              <span className="label">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:</span>
                              <span className="value">{training.score}/100</span>
                            </div>
                          )}
                        </div>

                        {training.certificate && (
                          <div className="detail-item">
                            <span className="label">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á:</span>
                            <span className="value certificate">{training.certificate}</span>
                          </div>
                        )}
                      </div>

                      {training.notes && (
                        <div className="training-notes">
                          <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {training.notes}
                        </div>
                      )}

                      <div className="training-footer">
                        <div className="training-actions">
                          <button 
                            onClick={() => handleEditTraining(training)}
                            className="btn-edit"
                          >
                            ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                          </button>
                          <button 
                            onClick={() => handleDeleteTraining(training)}
                            className="btn-delete"
                          >
                            üóëÔ∏è ‡∏•‡∏ö
                          </button>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ */}
      {showCourseModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h3>{selectedCourse ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà'}</h3>
            <p>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á</p>
            <div style={{ marginTop: 16 }}>
              <ul>
                <li>‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</li>
                <li>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å</li>
                <li>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô</li>
                <li>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</li>
              </ul>
            </div>
            <button onClick={() => setShowCourseModal(false)}>‡∏õ‡∏¥‡∏î</button>
          </div>
        </div>
      )}

      {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° */}
      {showTrainingModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h3>{selectedTraining ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°'}</h3>
            <p>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á</p>
            <div style={{ marginTop: 16 }}>
              <ul>
                <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</li>
                <li>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°</li>
                <li>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</li>
                <li>‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</li>
              </ul>
            </div>
            <button onClick={() => setShowTrainingModal(false)}>‡∏õ‡∏¥‡∏î</button>
          </div>
        </div>
      )}
    </div>
  );
}

export default TrainingPage; 