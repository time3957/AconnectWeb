#!/usr/bin/env python
"""
Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Admin User ‡πÅ‡∏•‡∏∞ Password ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
"""
import os
import django

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aams_backend.settings')
django.setup()

from core.models import User

def create_admin_user():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á admin user ‡πÅ‡∏•‡∏∞ password ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô"""
    print("=== ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin User ===")
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• admin user
    admin_data = {
        'username': 'admin',
        'email': 'admin@aams.com',
        'first_name': '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•',
        'last_name': '‡∏£‡∏∞‡∏ö‡∏ö',
        'employee_id': 'ADM001',
        'position': '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
        'department': 'IT',
        'is_staff': True,
        'is_superuser': True,
        'is_active': True
    }
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ admin user ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    existing_admin = User.objects.filter(username='admin').first()
    
    if existing_admin:
        print("‚ö†Ô∏è  ‡∏û‡∏ö admin user ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
        print(f"   Username: {existing_admin.username}")
        print(f"   Email: {existing_admin.email}")
        print(f"   is_staff: {existing_admin.is_staff}")
        print(f"   is_superuser: {existing_admin.is_superuser}")
        
        # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        response = input("\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô 'admin123' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ")
        if response.lower() == 'y':
            existing_admin.set_password('admin123')
            existing_admin.save()
            print("‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            print("   Username: admin")
            print("   Password: admin123")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
        
        return existing_admin
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á admin user ‡πÉ‡∏´‡∏°‡πà
    try:
        admin_user = User.objects.create_user(
            username=admin_data['username'],
            email=admin_data['email'],
            password='admin123',  # ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            first_name=admin_data['first_name'],
            last_name=admin_data['last_name'],
            employee_id=admin_data['employee_id'],
            position=admin_data['position'],
            department=admin_data['department'],
            is_staff=admin_data['is_staff'],
            is_superuser=admin_data['is_superuser'],
            is_active=admin_data['is_active']
        )
        
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin User ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        print(f"   Username: {admin_user.username}")
        print(f"   Email: {admin_user.email}")
        print(f"   Password: admin123")
        print(f"   Name: {admin_user.get_full_name()}")
        print(f"   Employee ID: {admin_user.employee_id}")
        print(f"   Position: {admin_user.position}")
        print(f"   Department: {admin_user.department}")
        print(f"   is_staff: {admin_user.is_staff}")
        print(f"   is_superuser: {admin_user.is_superuser}")
        
        return admin_user
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á admin user: {e}")
        return None

def create_test_users():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á test users ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""
    print("\n=== ‡∏™‡∏£‡πâ‡∏≤‡∏á Test Users ===")
    
    test_users = [
        {
            'username': 'manager',
            'email': 'manager@aams.com',
            'first_name': '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
            'last_name': '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£',
            'employee_id': 'MGR001',
            'position': '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£',
            'department': '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£',
            'is_staff': True,
            'is_superuser': False,
            'password': 'manager123'
        },
        {
            'username': 'user1',
            'email': 'user1@aams.com',
            'first_name': '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
            'last_name': '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
            'employee_id': 'USR001',
            'position': '‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤',
            'department': 'IT',
            'is_staff': False,
            'is_superuser': False,
            'password': 'user123'
        }
    ]
    
    created_users = []
    
    for user_data in test_users:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        existing_user = User.objects.filter(username=user_data['username']).first()
        
        if existing_user:
            print(f"‚ö†Ô∏è  ‡∏û‡∏ö user '{user_data['username']}' ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            continue
        
        try:
            user = User.objects.create_user(
                username=user_data['username'],
                email=user_data['email'],
                password=user_data['password'],
                first_name=user_data['first_name'],
                last_name=user_data['last_name'],
                employee_id=user_data['employee_id'],
                position=user_data['position'],
                department=user_data['department'],
                is_staff=user_data['is_staff'],
                is_superuser=user_data['is_superuser'],
                is_active=True
            )
            
            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á user '{user.username}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            print(f"   Password: {user_data['password']}")
            created_users.append(user)
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á user '{user_data['username']}': {e}")
    
    return created_users

def list_all_users():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("\n=== ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ===")
    
    users = User.objects.all().order_by('username')
    
    if not users.exists():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö users ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        return
    
    print(f"‡∏û‡∏ö users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {users.count()} ‡∏Ñ‡∏ô:")
    
    for user in users:
        print(f"\nüë§ {user.username}")
        print(f"   Name: {user.get_full_name()}")
        print(f"   Email: {user.email}")
        print(f"   Employee ID: {user.employee_id}")
        print(f"   Position: {user.position}")
        print(f"   Department: {user.department}")
        print(f"   is_staff: {user.is_staff}")
        print(f"   is_superuser: {user.is_superuser}")
        print(f"   is_active: {user.is_active}")
        print(f"   Date joined: {user.date_joined.strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Users ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AAMS")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á admin user
    admin_user = create_admin_user()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á test users
    test_users = create_test_users()
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    list_all_users()
    
    print("\n=== ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ Login ===")
    print("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Login:")
    print("\n1. Admin User:")
    print("   Username: admin")
    print("   Password: admin123")
    print("   Role: Superuser")
    
    print("\n2. Manager User:")
    print("   Username: manager")
    print("   Password: manager123")
    print("   Role: Staff (Admin)")
    
    print("\n3. Regular User:")
    print("   Username: user1")
    print("   Password: user123")
    print("   Role: Regular User")
    
    print("\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Users")
    print("üéØ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠ Login ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß") 